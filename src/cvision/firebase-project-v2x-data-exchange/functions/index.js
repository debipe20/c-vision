const functions = require("firebase-functions");
const admin = require("firebase-admin");
const axios = require("axios"); // Import axios for HTTP requests

// Ensure Firebase Admin SDK is initialized
if (admin.apps.length === 0) {
    admin.initializeApp();
}

// !!! IMPORTANT: REPLACE THIS with your actual external backend URL !!!
// This is the URL of the Python script running on your external computer
// const EXTERNAL_BACKEND_URL = "http://YOUR_EXTERNAL_COMPUTER_IP_OR_HOSTNAME:YOUR_PORT/spat-receiver";
// const EXTERNAL_BACKEND_URL = "http://67.184.14.34:5000/spat-receiver";
const EXTERNAL_BACKEND_URL = "http://localhost:5000/spat-receiver";
// Or if you prefer 127.0.0.1:
// const EXTERNAL_BACKEND_URL = "http://127.0.0.1:5000/spat-receiver";
// Example: "http://192.168.1.100:5000/spat-receiver"

// !!! IMPORTANT: REPLACE THIS with your actual API Key for the backend (if required by your backend) !!!
const BACKEND_API_KEY = "YOUR_SECRET_API_KEY_FOR_BACKEND"; // Use a strong, unique key

// This function will be triggered every time new data is written under /spatData/{payloadId}
exports.forwardSpatToBackend = functions.database.ref("/spatData/{payloadId}")
    .onWrite(async (change, context) => {
        // Exit when the data is deleted.
        if (!change.after.exists()) {
            console.log(`Data deleted at path: ${context.resource.name}. Skipping forward.`);
            return null;
        }

        const dataFromDb = change.after.val(); // Get the new data written to the database
        const payloadId = context.params.payloadId; // Get the unique ID generated by the ingest function

        const encodedSpatB64 = dataFromDb.encodedSpat;

        if (!encodedSpatB64) {
            console.log(`No 'encodedSpat' field found for ID: ${payloadId}. Skipping forward.`);
            return null;
        }

        try {
            // The data in DB is a Base64 string, so we need to convert it back to binary (Buffer in Node.js)
            const encodedSpatRawBytes = Buffer.from(encodedSpatB64, 'base64');

            const headers = {
                "Content-Type": "application/octet-stream",
                "X-Payload-ID": payloadId, // Sending the generated ID for tracking on receiver side
                "X-API-Key": BACKEND_API_KEY, // If your backend needs an API key
            };

            // Make the POST request to the external computer
            const response = await axios.post(EXTERNAL_BACKEND_URL, encodedSpatRawBytes, { headers: headers, timeout: 10000 }); // 10 second timeout

            console.log(`Successfully forwarded encoded SPaT for ID: ${payloadId} to backend. Status: ${response.status}.`);
            return null; // Return null to indicate successful completion
        } catch (error) {
            console.error(`Error forwarding encoded SPaT for ID: ${payloadId} to backend:`, error.message);
            if (error.response) {
                console.error("Backend response status:", error.response.status);
                console.error("Backend response data:", error.response.data);
            } else if (error.request) {
                console.error("No response received from backend:", error.request);
            } else {
                console.error("Error in request setup:", error.message);
            }
            return null; // Return null even on error to prevent retry loops
        }
    });